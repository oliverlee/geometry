load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "type_metaprogramming",
    srcs = [
        "type_metaprogramming/cartesian_product.hpp",
        "type_metaprogramming/empty.hpp",
        "type_metaprogramming/flatten.hpp",
        "type_metaprogramming/get_type.hpp",
        "type_metaprogramming/index_constant_sequence.hpp",
        "type_metaprogramming/list.hpp",
        "type_metaprogramming/rebind_into.hpp",
        "type_metaprogramming/same.hpp",
        "type_metaprogramming/sort.hpp",
        "type_metaprogramming/transform.hpp",
        "type_metaprogramming/unique.hpp",
    ],
    hdrs = ["type_metaprogramming.hpp"],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "expression_template",
    srcs = [
        "expression_template/enable_ring_operations.hpp",
        "expression_template/flattened.hpp",
        "expression_template/is_associative.hpp",
        "expression_template/leaf.hpp",
        "expression_template/multiplies.hpp",
        "expression_template/op.hpp",
        "expression_template/plus.hpp",
    ],
    hdrs = ["expression_template.hpp"],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "geometry",
    srcs = [
        "src/algebra.hpp",
        "src/detail/blade_list.hpp",
        "src/detail/contract_dimensions.hpp",
        "src/detail/factorial.hpp",
        "src/detail/geometric_product.hpp",
        "src/detail/ordered.hpp",
        "src/detail/ordered_dimensions.hpp",
        "src/detail/strictly_increasing.hpp",
        "src/type_list.hpp",
    ],
    hdrs = ["geometry.hpp"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":expression_template",
        ":type_metaprogramming",
    ],
)
